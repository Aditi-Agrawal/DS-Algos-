Dynamic Programming can be described as storing answers to various sub-problems to be used later whenever required to solve the main problem.

The two common dynamic programming approaches are:

Memoization: Known as the “top-down” dynamic programming, usually the problem is solved in the direction of the main problem to the base cases.
Tabulation: Known as the “bottom-up ” dynamic programming, usually the problem is solved in the direction of solving the base cases to the main problem.


We will be using the example of Fibonacci numbers here. The following series is called the Fibonacci series:
0,1,1,2,3,5,8,13,21,…
We need to find the nth Fibonacci number, where n is based on a 0-based index.
Every ith number of the series is equal to the sum of (i-1)th and (i-2)th number where the first and second number is given as 0 and 1 respectively.
__________________________________________________________________________________________________________________
Part – 1: Memoizaton
__________________________________________________________________________________________________________________
Steps to memoize a recursive solution:
------------------------------------------
Any recursive solution to a problem can be memoized using these three steps:

1. Create a dp[n+1] array initialized to -1.
2. Whenever we want to find the answer of a particular value (say n), we first check whether the answer is already calculated using the dp array(i.e dp[n]!= -1 ). 
   If yes, simply return the value from the dp array.
3. If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, 
   we will set dp[n] to the solution we get.
----------------------------------------------------------------------------------------------
Java Code
----------------------------------------------------------------------------------------------
import java.util.*;
class MyClass{
static int f(int n, int[] dp){
    if(n<=1) return n;
    
    if(dp[n]!= -1) return dp[n];
    return dp[n]= f(n-1,dp) + f(n-2,dp);
}


public static void main(String args[]) {

  int n=5;
  int dp[]=new int[n+1];
  Arrays.fill(dp,-1);
  System.out.println(f(n,dp));
  
}
}
------------------------
Time Complexity: O(N)
------------------------
Reason: The overlapping subproblems will return the answer in constant time O(1). Therefore the total number of new subproblems we solve is ‘n’. 
Hence total time complexity is O(N).
-------------------------
Space Complexity: O(N)
-------------------------
Reason: We are using a recursion stack space(O(N)) and an array (again O(N)). Therefore total space complexity will be O(N) + O(N) ≈ O(N)
__________________________________________________________________________________________________________________
Part -2: Tabulation
__________________________________________________________________________________________________________________
Steps to convert Recursive Solution to Tabulation one.
--------------------------------------------------------
1. Declare a dp[] array of size n+1.
2. First initialize the base condition values, i.e i=0 and i=1 of the dp array as 0 and 1 respectively.
3. Set an iterative loop which traverses the array( from index 2 to n) and for every index set its value as dp[i-1] + dp[i-2]. 
----------------------------------------------------------------------------------------------
Java Code
----------------------------------------------------------------------------------------------
import java.util.*;
class MyClass{
public static void main(String args[]) {

  int n=5;
  int dp[]=new int[n+1];
  Arrays.fill(dp,-1);
  dp[0]= 0;
  dp[1]= 1;
  
  for(int i=2; i<=n; i++){
      dp[i] = dp[i-1]+ dp[i-2];
  }
  System.out.println(dp[n]);
}
}
----------------------
Time Complexity: O(N)
----------------------
Reason: We are running a simple iterative loop
-----------------------
Space Complexity: O(N)
-----------------------
Reason: We are using an external array of size ‘n+1’.
__________________________________________________________________________________________________________________
Part 3: Space Optimization
__________________________________________________________________________________________________________________
----------------------------------------------------------------------------------------------
Java Code
----------------------------------------------------------------------------------------------
import java.util.*;
class MyClass{
public static void main(String args[]) {
 int n=5;
  
  int prev2 = 0;
  int prev = 1;
  
  for(int i=2; i<=n; i++){
      int cur_i = prev2+ prev;
      prev2 = prev;
      prev= cur_i;
  }
  System.out.println(prev);
  
  
}
}
------------------------
Time Complexity: O(N)
------------------------
Reason: We are running a simple iterative loop
------------------------
Space Complexity: O(1)
------------------------
Reason: We are not using any extra space
